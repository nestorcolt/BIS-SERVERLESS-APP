AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for BIS-Cloud

Globals:
    Function:
        Runtime: python3.6
        Layers:
            -   Fn::ImportValue: python-packages-layer-version # Importing the layer from a different stack

Resources:
    IterStateMachineLogs:
        Type: AWS::Logs::LogGroup

    # state machine  ----------------------------------------------------------------------------------------
    IteratorStateMachine:
        Type: AWS::Serverless::StateMachine
        Properties:
            Type: EXPRESS
            Name: IteratorStateMachine
            DefinitionUri: statemachine/loop_state_machine.asl.json
            DefinitionSubstitutions:
                FlexSmIteratorFunctionArn: !GetAtt FlexSmIterator.Arn
            Events:
                StartScheduledEvent:
                    Type: Schedule
                    Properties:
                        Schedule: cron(0/1 * * * ? *)
            Logging:
                Destinations:
                    -   CloudWatchLogsLogGroup:
                            LogGroupArn: !GetAtt IterStateMachineLogs.Arn
                IncludeExecutionData: true
                Level: ALL
            Policies:
                -   LambdaInvokePolicy:
                        FunctionName: !Ref FlexSmIterator
                - CloudWatchLogsFullAccess

    # dynamo db  ----------------------------------------------------------------------------------------
    DynamoDBTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: Users
            StreamSpecification:
                StreamViewType: NEW_AND_OLD_IMAGES
            AttributeDefinitions:
                -   AttributeName: user_id
                    AttributeType: S
            KeySchema:
                -   AttributeName: user_id
                    KeyType: HASH
            ProvisionedThroughput:
                ReadCapacityUnits: 100
                WriteCapacityUnits: 100

    BlocksTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: Blocks
            StreamSpecification:
                StreamViewType: NEW_AND_OLD_IMAGES
            AttributeDefinitions:
                -   AttributeName: user_id
                    AttributeType: S
                -   AttributeName: block_id
                    AttributeType: N
                -   AttributeName: station_id
                    AttributeType: S
            KeySchema:
                -   AttributeName: user_id
                    KeyType: HASH
                -   AttributeName: block_id
                    KeyType: RANGE
            ProvisionedThroughput:
                ReadCapacityUnits: 100
                WriteCapacityUnits: 100

            GlobalSecondaryIndexes:
                -   IndexName: Blocks_GSI1
                    KeySchema:
                        -   AttributeName: station_id
                            KeyType: HASH
                    Projection:
                        ProjectionType: ALL
                    ProvisionedThroughput:
                        ReadCapacityUnits: 100
                        WriteCapacityUnits: 100

    OffersTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: Offers
            StreamSpecification:
                StreamViewType: NEW_AND_OLD_IMAGES
            AttributeDefinitions:
                -   AttributeName: user_id
                    AttributeType: S
                -   AttributeName: offer_id
                    AttributeType: S
                -   AttributeName: station_id
                    AttributeType: S
            KeySchema:
                -   AttributeName: user_id
                    KeyType: HASH
                -   AttributeName: offer_id
                    KeyType: RANGE
            ProvisionedThroughput:
                ReadCapacityUnits: 100
                WriteCapacityUnits: 100

            GlobalSecondaryIndexes:
                -   IndexName: Offers_GSI1
                    KeySchema:
                        -   AttributeName: station_id
                            KeyType: HASH
                    Projection:
                        ProjectionType: ALL
                    ProvisionedThroughput:
                        ReadCapacityUnits: 100
                        WriteCapacityUnits: 100

    # Lambda layers ----------------------------------------------------------------------------------------
    CustomAppLayers:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: CustomAppLayers
            Description: Owner modules
            ContentUri: ../../CloudCore/python
            RetentionPolicy: Retain
            LicenseInfo: MIT
            CompatibleRuntimes:
                - python3.6
        Metadata:
            BuildMethod: python3.6

    # SQS section ---------------------------------------------------------------------------------------
    SeOnProcessQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: SeOnProcessQueue
            ReceiveMessageWaitTimeSeconds: 1
            MessageRetentionPeriod: 60
            VisibilityTimeout: 0

    myQueuePolicy:
        Type: AWS::SQS::QueuePolicy
        Properties:
            Queues:
                - !Ref SeOnProcessQueue
            PolicyDocument:
                Statement:
                    Effect: Allow
                    Principal: "*"
                    Action: "sqs:*"
                    Resource: "*"

    AuthenticateSubscriptionQueue:
        Type: AWS::SNS::Subscription
        Properties:
            Endpoint: !GetAtt SeOnProcessQueue.Arn
            Protocol: sqs
            RawMessageDelivery: true
            TopicArn: !Sub 'arn:aws:sns:us-east-1:${AWS::AccountId}:SE-AUTHENTICATE-TOPIC'

    ErrorSubscriptionQueue:
        Type: AWS::SNS::Subscription
        Properties:
            Endpoint: !GetAtt SeOnProcessQueue.Arn
            Protocol: sqs
            RawMessageDelivery: true
            TopicArn: !Sub 'arn:aws:sns:us-east-1:${AWS::AccountId}:SE-ERROR-TOPIC'

    SleepSubscriptionQueue:
        Type: AWS::SNS::Subscription
        Properties:
            Endpoint: !GetAtt SeOnProcessQueue.Arn
            Protocol: sqs
            RawMessageDelivery: true
            TopicArn: !Sub 'arn:aws:sns:us-east-1:${AWS::AccountId}:SE-SLEEP-TOPIC'

    # Lambdas section ---------------------------------------------------------------------------------------
    FlexSmIterator:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 512
            Timeout: 20
            FunctionName: FlexSmIterator
            Description: allow to iterate every second base on the state machine trigger
            CodeUri: serverless/searchEngine/
            Handler: flexSmIterator.function_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AWSLambdaFullAccess
                - AWSStepFunctionsFullAccess

    SleepSearchEngine:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 1024
            Timeout: 20
            FunctionName: SleepSearchEngine
            Description: Handles the put to sleep of a search engine Ec2 instance for 30 minutes
            CodeUri: serverless/searchEngine/
            Handler: sleepSearch.function_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonSNSFullAccess
                - AmazonDynamoDBFullAccess
                - AWSLambdaDynamoDBExecutionRole
            Events:
                SNSEvent:
                    Type: SNS
                    Properties:
                        Topic: !Sub 'arn:aws:sns:us-east-1:${AWS::AccountId}:SE-SLEEP-TOPIC'

    ErrorSearchEngine:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 512
            Timeout: 20
            FunctionName: ErrorSearchEngine
            Description: Deactivate search engine on error
            CodeUri: serverless/searchEngine/
            Handler: handleAuthError.function_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonSNSFullAccess
                - AmazonDynamoDBFullAccess
                - AWSLambdaDynamoDBExecutionRole
                - CloudWatchLogsFullAccess
            Events:
                SNSEvent:
                    Type: SNS
                    Properties:
                        Topic: !Sub 'arn:aws:sns:us-east-1:${AWS::AccountId}:SE-ERROR-TOPIC'

    SearchEngineCloudLogs:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 256
            Timeout: 5
            FunctionName: SearchEngineCloudLogs
            Description:
            CodeUri: serverless/logging/
            Handler: engineLogger.lambda_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonSNSFullAccess
                - CloudWatchLogsFullAccess
            Events:
                SNSEvent:
                    Type: SNS
                    Properties:
                        Topic: !Sub 'arn:aws:sns:us-east-1:${AWS::AccountId}:SE-LOGS-TOPIC'

    FlexListActiveUsers:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 10240
            Timeout: 301
            FunctionName: FlexListActiveUsers
            Description: Check dynamo db and get the latest active users (after 30 mins sleep) search=True
            CodeUri: serverless/searchEngine/
            Handler: flexListActiveUsers.function_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonDynamoDBFullAccess
                - AmazonSNSFullAccess
                - AmazonSQSFullAccess

    CleanUpTables:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 2048
            Timeout: 361
            FunctionName: CleanUpTables
            Description: every mid night deletes entries older than 48 hours ago in blocks and offers tables
            CodeUri: serverless/cronoLambdas/
            Handler: CleanUpTables.lambda_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonDynamoDBFullAccess
            Events:
                StartScheduledEvent:
                    Type: Schedule
                    Properties:
                        Schedule: cron(59 23 * * ? *)

    LogAllUsers:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 2048
            Timeout: 900
            FunctionName: LogAllUsers
            Description: every minute log all active users stats to cloudwatch
            CodeUri: serverless/logging/
            Handler: logUserStats.lambda_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonDynamoDBFullAccess
                - CloudWatchLogsFullAccess
                - AmazonSNSFullAccess
            Events:
                StartScheduledEvent:
                    Type: Schedule
                    Properties:
                        Schedule: cron(0/1 * * * ? *)

    UpdateBlocksTable:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 1024
            Timeout: 20
            FunctionName: UpdateBlocksTable
            Description: Handles the update of blocks table with the blocks info
            CodeUri: serverless/searchEngine/
            Handler: updateBlocksTable.function_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonSNSFullAccess
                - AmazonDynamoDBFullAccess
            Events:
                SNSEvent:
                    Type: SNS
                    Properties:
                        Topic: !Sub 'arn:aws:sns:us-east-1:${AWS::AccountId}:SE-ACCEPTED-TOPIC'

    UpdateOffersTable:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 512
            Timeout: 20
            FunctionName: UpdateOffersTable
            Description: Handles the update of offers table with the offer info
            CodeUri: serverless/searchEngine/
            Handler: updateOffersTable.function_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonSNSFullAccess
                - AmazonDynamoDBFullAccess
            Events:
                SNSEvent:
                    Type: SNS
                    Properties:
                        Topic: !Sub 'arn:aws:sns:us-east-1:${AWS::AccountId}:SE-OFFERS-TOPIC'

    NotifyBlockToWeb:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 1024
            Timeout: 20
            FunctionName: NotifyBlockToWeb
            Description: Send a post request to a web endpoint with the block info
            CodeUri: serverless/apiGateway/
            Handler: notifyBlockToWeb.lambda_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonSNSFullAccess
                - AmazonDynamoDBFullAccess
            Events:
                SNSEvent:
                    Type: SNS
                    Properties:
                        Topic: !Sub 'arn:aws:sns:us-east-1:${AWS::AccountId}:SE-ACCEPTED-TOPIC'

    NotifyErrorToWeb:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 512
            Timeout: 20
            FunctionName: NotifyErrorToWeb
            Description: Send a post request to a web endpoint with the error user info
            CodeUri: serverless/apiGateway/
            Handler: notifyErrorToWeb.lambda_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonSNSFullAccess
            Events:
                SNSEvent:
                    Type: SNS
                    Properties:
                        Topic: !Sub 'arn:aws:sns:us-east-1:${AWS::AccountId}:SE-ERROR-TOPIC'

    # Api Gateway  ----------------------------------------------------------------------------------------
    AuthApi:
        Type: AWS::Serverless::Api
        Properties:
            Name: Bis-Auth-Api
            StageName: Prod

    MainApi:
        Type: AWS::Serverless::Api
        Properties:
            Name: Bis-Main-Api
            StageName: Prod
            Cors:
                AllowMethods: "'*'"
                AllowHeaders: "'*'"
                AllowOrigin: "'*'"
            Auth:
                DefaultAuthorizer: MyCognitoUserPoolAuthorizer
                AddDefaultAuthorizerToCorsPreflight: False
                Authorizers:
                    MyCognitoUserPoolAuthorizer:
                        UserPoolArn: !GetAtt MyCognitoUserPool.Arn

    MyCognitoUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: bis-api-gateway-cognito-pool
            UsernameConfiguration:
                CaseSensitive: false
            AutoVerifiedAttributes:
                - email
            LambdaConfig:
                PreSignUp: !GetAtt PreSignupLambdaFunction.Arn
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
            Schema:
                -   AttributeDataType: String
                    Name: name
                    Required: true
                    Mutable: true

                -   AttributeDataType: String
                    Name: email
                    Required: true
                    Mutable: false

    CognitoUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            ClientName: api_gateway_bis_auth_cognito_client
            UserPoolId: !Ref MyCognitoUserPool
            TokenValidityUnits:
                RefreshToken: "days"
                AccessToken: "minutes"
            RefreshTokenValidity: 3650
            AccessTokenValidity: 1440
            GenerateSecret: false
            ExplicitAuthFlows:
                - ALLOW_ADMIN_USER_PASSWORD_AUTH
                - ALLOW_REFRESH_TOKEN_AUTH

    PreSignupLambdaFunction:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 256
            Timeout: 5
            FunctionName: PreSignupLambdaFunction
            Description: Handles api auth
            CodeUri: serverless/apiGateway/
            Handler: signUp.function_handler

    LambdaCognitoUserPoolExecutionPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt PreSignupLambdaFunction.Arn
            Principal: cognito-idp.amazonaws.com
            SourceArn: !Sub 'arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${MyCognitoUserPool}'

    # api gateway lambdas ----------------------------------------------------------------------------------------
    GetWebAuthentication:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 256
            Timeout: 5
            FunctionName: GetWebAuthentication
            Description: Parsing the username and password of cognito user will retreive the tokens
            CodeUri: serverless/apiGateway/
            Handler: authenticate.function_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonCognitoPowerUser
            Events:
                AuthApiGateway:
                    Type: Api
                    Properties:
                        RestApiId: !Ref AuthApi
                        Path: /auth
                        Method: get

    ApiCreateUser:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 1024
            Timeout: 20
            FunctionName: ApiCreateUser
            Description: Handles creation of a user in dynamo db Users table
            CodeUri: serverless/apiGateway/
            Handler: createUser.function_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonDynamoDBFullAccess
                - AmazonAPIGatewayInvokeFullAccess
            Events:
                BisApiGateway:
                    Type: Api
                    Properties:
                        RestApiId: !Ref MainApi
                        Path: /users
                        Method: post

    ApiDeleteUser:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 1024
            Timeout: 20
            FunctionName: ApiDeleteUser
            Description: Handles deletion of a user in dynamo db Users table
            CodeUri: serverless/apiGateway/
            Handler: deleteUser.function_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonDynamoDBFullAccess
                - AmazonAPIGatewayInvokeFullAccess
            Events:
                BisApiGateway:
                    Type: Api
                    Properties:
                        RestApiId: !Ref MainApi
                        Path: /users
                        Method: delete

    ApiUpdateUser:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 1024
            Timeout: 20
            FunctionName: ApiUpdateUser
            Description: Handles update of a user in dynamo db Users table
            CodeUri: serverless/apiGateway/
            Handler: updateUser.function_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonDynamoDBFullAccess
                - AmazonAPIGatewayInvokeFullAccess
            Events:
                BisApiGateway:
                    Type: Api
                    Properties:
                        RestApiId: !Ref MainApi
                        Path: /users
                        Method: put

    ApiReadUserBlocks:
        Type: AWS::Serverless::Function
        Properties:
            MemorySize: 1024
            Timeout: 20
            FunctionName: ApiReadUserBlocks
            Description: Handles the reading of the user's blocks on the Blocks table
            CodeUri: serverless/apiGateway/
            Handler: readUserBlocks.function_handler
            Layers:
                - !Ref CustomAppLayers
            Policies:
                - AmazonDynamoDBFullAccess
                - AmazonAPIGatewayInvokeFullAccess
            Events:
                BisApiGateway:
                    Type: Api
                    Properties:
                        RestApiId: !Ref MainApi
                        Path: /blocks
                        Method: get

Outputs:
    Region:
        Description: "Region"
        Value: !Ref AWS::Region

    ApiId:
        Description: "API ID"
        Value: !Ref MainApi

    ApiUrl:
        Description: "API endpoint URL for Prod environment"
        Value: !Sub 'https://${MainApi}.execute-api.${AWS::Region}.amazonaws.com/prod/'

    CognitoUserPoolId:
        Description: "Cognito User Pool Id"
        Value: !Ref MyCognitoUserPool

    CognitoUserPoolClientId:
        Description: "Cognito User Pool Client Id"
        Value: !Ref CognitoUserPoolClient